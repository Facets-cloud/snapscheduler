// +build !ignore_autogenerated

// This file was autogenerated by openapi-gen. Do not edit it manually!

package v1alpha1

import (
	spec "github.com/go-openapi/spec"
	common "k8s.io/kube-openapi/pkg/common"
)

func GetOpenAPIDefinitions(ref common.ReferenceCallback) map[string]common.OpenAPIDefinition {
	return map[string]common.OpenAPIDefinition{
		"./pkg/apis/snapscheduler/v1alpha1.SnapshotRetentionSpec":  schema_pkg_apis_snapscheduler_v1alpha1_SnapshotRetentionSpec(ref),
		"./pkg/apis/snapscheduler/v1alpha1.SnapshotSchedule":       schema_pkg_apis_snapscheduler_v1alpha1_SnapshotSchedule(ref),
		"./pkg/apis/snapscheduler/v1alpha1.SnapshotScheduleSpec":   schema_pkg_apis_snapscheduler_v1alpha1_SnapshotScheduleSpec(ref),
		"./pkg/apis/snapscheduler/v1alpha1.SnapshotScheduleStatus": schema_pkg_apis_snapscheduler_v1alpha1_SnapshotScheduleStatus(ref),
		"./pkg/apis/snapscheduler/v1alpha1.SnapshotTemplateSpec":   schema_pkg_apis_snapscheduler_v1alpha1_SnapshotTemplateSpec(ref),
	}
}

func schema_pkg_apis_snapscheduler_v1alpha1_SnapshotRetentionSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "SnapshotRetentionSpec defines how long snapshots should be kept.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"expires": {
						SchemaProps: spec.SchemaProps{
							Description: "Expires is the length of time (time.Duration) after which a given Snapshot will be deleted.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"maxCount": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int32",
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_snapscheduler_v1alpha1_SnapshotSchedule(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "SnapshotSchedule is the Schema for the snapshotschedules API",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/snapscheduler/v1alpha1.SnapshotScheduleSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/snapscheduler/v1alpha1.SnapshotScheduleStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"./pkg/apis/snapscheduler/v1alpha1.SnapshotScheduleSpec", "./pkg/apis/snapscheduler/v1alpha1.SnapshotScheduleStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_snapscheduler_v1alpha1_SnapshotScheduleSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "SnapshotScheduleSpec defines the desired state of SnapshotSchedule",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"claimSelector": {
						SchemaProps: spec.SchemaProps{
							Description: "ClaimSelector selects which PVCs will be snapshotted according to this schedule.",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.LabelSelector"),
						},
					},
					"retention": {
						SchemaProps: spec.SchemaProps{
							Description: "Retention determines how long this schedule's snapshots will be kept.",
							Ref:         ref("./pkg/apis/snapscheduler/v1alpha1.SnapshotRetentionSpec"),
						},
					},
					"schedule": {
						SchemaProps: spec.SchemaProps{
							Description: "Schedule is a Cronspec specifying when snapshots should be taken. See https://en.wikipedia.org/wiki/Cron for a description of the format.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"disabled": {
						SchemaProps: spec.SchemaProps{
							Description: "Disabled determines whether this schedule is currently disabled.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"snapshotTemplate": {
						SchemaProps: spec.SchemaProps{
							Description: "SnapshotTemplate is a template description of the Snapshots to be created.",
							Ref:         ref("./pkg/apis/snapscheduler/v1alpha1.SnapshotTemplateSpec"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"./pkg/apis/snapscheduler/v1alpha1.SnapshotRetentionSpec", "./pkg/apis/snapscheduler/v1alpha1.SnapshotTemplateSpec", "k8s.io/apimachinery/pkg/apis/meta/v1.LabelSelector"},
	}
}

func schema_pkg_apis_snapscheduler_v1alpha1_SnapshotScheduleStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "SnapshotScheduleStatus defines the observed state of SnapshotSchedule",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"conditions": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type":       "set",
								"x-kubernetes-patch-merge-key": "type",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Conditions is a list of conditions related to operator reconciliation.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/openshift/custom-resource-status/conditions/v1.Condition"),
									},
								},
							},
						},
					},
					"lastSnapshotTime": {
						SchemaProps: spec.SchemaProps{
							Description: "LastSnapshotTime is the time of the most recent set of snapshots generated by this schedule.",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"nextSnapshotTime": {
						SchemaProps: spec.SchemaProps{
							Description: "NextSnapshotTime is the time when this schedule should create the next set of snapshots.",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/openshift/custom-resource-status/conditions/v1.Condition", "k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
	}
}

func schema_pkg_apis_snapscheduler_v1alpha1_SnapshotTemplateSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "SnapshotTemplateSpec defines the template for Snapshot objects",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"labels": {
						SchemaProps: spec.SchemaProps{
							Description: "Labels is a list of labels that should be added to each Snapshot created by this schedule.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"snapshotClassName": {
						SchemaProps: spec.SchemaProps{
							Description: "SnapshotClassName is the name of the VSC to be used when creating Snapshots.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}
